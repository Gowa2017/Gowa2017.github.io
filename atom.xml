<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>退思园</title>
  <icon>https://gowa.club/icon.png</icon>
  <subtitle>烦恼一般都是想太多了。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gowa.club/"/>
  <updated>2019-12-02T07:11:18.000Z</updated>
  <id>https://gowa.club/</id>
  
  <author>
    <name>Gowa2017 Zhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android利用Input类实现模拟输入</title>
    <link href="https://gowa.club/Android/Android%E5%88%A9%E7%94%A8Input%E7%B1%BB%E5%AE%9E%E7%8E%B0%E6%A8%A1%E6%8B%9F%E8%BE%93%E5%85%A5.html"/>
    <id>https://gowa.club/Android/Android%E5%88%A9%E7%94%A8Input%E7%B1%BB%E5%AE%9E%E7%8E%B0%E6%A8%A1%E6%8B%9F%E8%BE%93%E5%85%A5.html</id>
    <published>2019-12-02T07:11:18.000Z</published>
    <updated>2019-12-02T07:11:18.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在文章 &lt;a href=&quot;/Android/Android%E4%B8%AD%E6%A8%A1%E6%8B%9F%E8%BE%93%E5%85%A5%E7%9A%84%E5%AE%9E%E7%8E%B0.html&quot; title=&quot;Android中模拟输入的实现&quot;&gt;Android中模拟输入的实现&lt;/a&gt; 我们查看了官方提供的 &lt;strong&gt;com.android.commands.input.INPUT&lt;/strong&gt; 类来进行模拟输入的实现过程。但是有一个很猥琐的地方就是，这个 Input 类我们是无法访问的，其被定义为非 SDK 类，我们用反射的方法来获取这个类的实现的时候，会收到警告。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://gowa.club/categories/Android/"/>
    
    
      <category term="Android" scheme="https://gowa.club/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Lua使用luaOpenCV来使用OpenCV库</title>
    <link href="https://gowa.club/Lua/Lua%E4%BD%BF%E7%94%A8luaOpenCV%E6%9D%A5%E4%BD%BF%E7%94%A8OpenCV%E5%BA%93.html"/>
    <id>https://gowa.club/Lua/Lua%E4%BD%BF%E7%94%A8luaOpenCV%E6%9D%A5%E4%BD%BF%E7%94%A8OpenCV%E5%BA%93.html</id>
    <published>2019-12-01T13:47:44.000Z</published>
    <updated>2019-12-01T13:47:44.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Python 使用 OpenCV 是非常简单的，但是 Lua 使用起来就没有这么容易了，概因为没有人来维护这个东西，没有现程可以用的模块。究其原理，也就是将 OpenCV 库进行一下 LuaBinding 然后就可以在 Lua 虚拟机中使用了，在 GitHub 上就看到了 &lt;a href=&quot;https://github.com/satoren/luaOpenCV&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/satoren/luaOpenCV&lt;/a&gt; 这么一个库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Lua" scheme="https://gowa.club/categories/Lua/"/>
    
    
      <category term="Lua" scheme="https://gowa.club/tags/Lua/"/>
    
      <category term="OpenCV" scheme="https://gowa.club/tags/OpenCV/"/>
    
      <category term="LuaBinding" scheme="https://gowa.club/tags/LuaBinding/"/>
    
      <category term="Kaguya" scheme="https://gowa.club/tags/Kaguya/"/>
    
  </entry>
  
  <entry>
    <title>Python使用OpenCV</title>
    <link href="https://gowa.club/Python/Python%E4%BD%BF%E7%94%A8OpenCV.html"/>
    <id>https://gowa.club/Python/Python%E4%BD%BF%E7%94%A8OpenCV.html</id>
    <published>2019-12-01T13:37:53.000Z</published>
    <updated>2019-12-01T13:37:53.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;想要进行图片的识别，或者配合上深度学习来进行一些实验，所以就看上了 OpenCv 这个库，Python 的使用非常的简单，一句话就能安装。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://gowa.club/categories/Python/"/>
    
    
      <category term="Python" scheme="https://gowa.club/tags/Python/"/>
    
      <category term="OpenCV" scheme="https://gowa.club/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>安装Genymotion免费版模拟器进行调试</title>
    <link href="https://gowa.club/Android/%E5%AE%89%E8%A3%85Genymotion%E5%85%8D%E8%B4%B9%E7%89%88%E6%A8%A1%E6%8B%9F%E5%99%A8%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95.html"/>
    <id>https://gowa.club/Android/%E5%AE%89%E8%A3%85Genymotion%E5%85%8D%E8%B4%B9%E7%89%88%E6%A8%A1%E6%8B%9F%E5%99%A8%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95.html</id>
    <published>2019-11-30T13:43:49.000Z</published>
    <updated>2019-11-30T13:43:49.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;安卓原生的模拟器，就有一点不好，对于是使用了 arm abi 的 so 库的程序，其是无法进行安装的，因为模拟器本身是基于 x86 架构的，当然，我们可以安装 arm 架构的模拟器，但是那个速度感人，我在 mbp 2019 款上都跑得慢死了，据说 genymotion 速度可以还能支持 arm 的 apk 所以来安装一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://gowa.club/categories/Android/"/>
    
    
      <category term="Android" scheme="https://gowa.club/tags/Android/"/>
    
      <category term="Genymotion" scheme="https://gowa.club/tags/Genymotion/"/>
    
      <category term="Arm Translator" scheme="https://gowa.club/tags/Arm-Translator/"/>
    
  </entry>
  
  <entry>
    <title>Python解析网页内容</title>
    <link href="https://gowa.club/Python/Python%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E5%86%85%E5%AE%B9.html"/>
    <id>https://gowa.club/Python/Python%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E5%86%85%E5%AE%B9.html</id>
    <published>2019-11-28T16:21:45.000Z</published>
    <updated>2019-11-28T16:21:45.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;缘由是有伙计让我帮他下歌，问题是也太多了，当前很多站都无法下载了，其实不是不能，而是不能直接下载了。而且他提过来的是一大串，还好，是在一个网页上。所以就想着弄个简单的脚本来解析一下歌曲信息，然后利用现成的工具来下载。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://gowa.club/categories/Python/"/>
    
    
      <category term="Python" scheme="https://gowa.club/tags/Python/"/>
    
      <category term="Requests" scheme="https://gowa.club/tags/Requests/"/>
    
  </entry>
  
  <entry>
    <title>Docker配置加速-镜像-源</title>
    <link href="https://gowa.club/Docker/Docker%E9%85%8D%E7%BD%AE%E5%8A%A0%E9%80%9F-%E9%95%9C%E5%83%8F-%E6%BA%90.html"/>
    <id>https://gowa.club/Docker/Docker%E9%85%8D%E7%BD%AE%E5%8A%A0%E9%80%9F-%E9%95%9C%E5%83%8F-%E6%BA%90.html</id>
    <published>2019-11-28T06:33:55.000Z</published>
    <updated>2019-11-28T06:33:55.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;为了加快下载速度&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://gowa.club/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://gowa.club/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker的网络结构</title>
    <link href="https://gowa.club/Docker/Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.html"/>
    <id>https://gowa.club/Docker/Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.html</id>
    <published>2019-11-27T14:48:25.000Z</published>
    <updated>2019-11-27T14:48:25.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Docker 支持几种网络模式，不过默认使用的是 bridge 模式，完整的介绍可以在 &lt;a href=&quot;https://docs.docker.com/network/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.docker.com/network/&lt;/a&gt; 看到。我这寻思要往其内部的细节上来看一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://gowa.club/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://gowa.club/tags/Docker/"/>
    
      <category term="Iptables" scheme="https://gowa.club/tags/Iptables/"/>
    
  </entry>
  
  <entry>
    <title>利用RxJava-Retrofit来下载文件遇到的坑</title>
    <link href="https://gowa.club/RxJava/%E5%88%A9%E7%94%A8RxJava-Retrofit%E6%9D%A5%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91.html"/>
    <id>https://gowa.club/RxJava/%E5%88%A9%E7%94%A8RxJava-Retrofit%E6%9D%A5%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91.html</id>
    <published>2019-11-27T06:03:06.000Z</published>
    <updated>2019-11-27T06:03:06.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在文章 &lt;a href=&quot;/RxJava/%E4%BD%BF%E7%94%A8Retrofit-Rxjava%E6%9D%A5%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6.html&quot; title=&quot;使用Retrofit-Rxjava来上传下载文件&quot;&gt;使用Retrofit-Rxjava来上传下载文件&lt;/a&gt; 大概对如何用 RxJava 配合下载文件做了一个介绍，但是最近想着，我们完全是可以将显示的进度，当作是事件发射出来的，但其中遇到了几个坑。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://gowa.club/categories/Android/"/>
    
      <category term="RxJava" scheme="https://gowa.club/categories/RxJava/"/>
    
    
      <category term="Android" scheme="https://gowa.club/tags/Android/"/>
    
      <category term="RxJava" scheme="https://gowa.club/tags/RxJava/"/>
    
      <category term="Retrofit" scheme="https://gowa.club/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>Docker的overlay2简述</title>
    <link href="https://gowa.club/Docker/Docker%E7%9A%84overlay2%E7%AE%80%E8%BF%B0.html"/>
    <id>https://gowa.club/Docker/Docker%E7%9A%84overlay2%E7%AE%80%E8%BF%B0.html</id>
    <published>2019-11-26T14:49:46.000Z</published>
    <updated>2019-11-26T14:49:46.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;话说 Docker 使用了一种 union FS 的分层文件系统，理解这个，是制作镜像和存储的关键，所以就一下官方文档的说明。 Docker 新的使用的是 overlay2 这个了。需要在一定的 Linux 内核上才能运行。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://gowa.club/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://gowa.club/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Okio的概念和使用</title>
    <link href="https://gowa.club/Android/Okio%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8.html"/>
    <id>https://gowa.club/Android/Okio%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8.html</id>
    <published>2019-11-26T01:41:37.000Z</published>
    <updated>2019-11-26T01:41:37.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;从 Retrofit/OkHttp 中的依赖而来，其封装 的一些IO操作，其里面有两个关键的概念 &lt;code&gt;source, sink&lt;/code&gt; ，这两个概念我在 Lua 中也看到，典型的是 &lt;a href=&quot;http://w3.impa.br/~diego/software/luasocket/old/luasocket-2.0-beta3/ltn12.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ltn12&lt;/a&gt;，source 是源， sink 是终点的意思，可以将其看做是输出。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://gowa.club/categories/Android/"/>
    
    
      <category term="Android" scheme="https://gowa.club/tags/Android/"/>
    
      <category term="Okio" scheme="https://gowa.club/tags/Okio/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit-OkHttp请求过程-源码阅读</title>
    <link href="https://gowa.club/RxJava/Retrofit-OkHttp%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BBmd.html"/>
    <id>https://gowa.club/RxJava/Retrofit-OkHttp%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BBmd.html</id>
    <published>2019-11-25T05:59:40.000Z</published>
    <updated>2019-11-25T05:59:40.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本来是想要看一下封装一下下载的，结果一不小心就走进了读源码的境地。所以就这样吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="RxJava" scheme="https://gowa.club/categories/RxJava/"/>
    
    
      <category term="Android" scheme="https://gowa.club/tags/Android/"/>
    
      <category term="RxJava" scheme="https://gowa.club/tags/RxJava/"/>
    
      <category term="Retrofit" scheme="https://gowa.club/tags/Retrofit/"/>
    
      <category term="OkHttp" scheme="https://gowa.club/tags/OkHttp/"/>
    
  </entry>
  
  <entry>
    <title>Hooking-Linux中的共享库函数</title>
    <link href="https://gowa.club/Android/Hooking-Linux%E4%B8%AD%E7%9A%84%E5%85%B1%E4%BA%AB%E5%BA%93%E5%87%BD%E6%95%B0.html"/>
    <id>https://gowa.club/Android/Hooking-Linux%E4%B8%AD%E7%9A%84%E5%85%B1%E4%BA%AB%E5%BA%93%E5%87%BD%E6%95%B0.html</id>
    <published>2019-11-20T02:55:12.000Z</published>
    <updated>2019-11-20T02:55:12.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;函数 Hooking 指的是一系列的在运行时用来拦截和改变已存函数行为的技术。本节使用动态加载API来演示一个进行 Hooking 的办法，主要是利用了 &lt;strong&gt;LD_PRELOAD&lt;/strong&gt; 环境变量。&lt;strong&gt;LD_PRELOAD&lt;/strong&gt;环境变量用来指定一个首先被加载器加载的共享库。先加载我们自己的共享库就能使我们拦截函数调用，接着我们就可以使用动态加载器的API来将原始的函数绑定到一个 &lt;strong&gt;函数指针&lt;/strong&gt;，之后继续调用这个函数指针。也就是说对原来的函数做了一个包装。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux/Unix" scheme="https://gowa.club/categories/Linux-Unix/"/>
    
      <category term="Android" scheme="https://gowa.club/categories/Android/"/>
    
    
      <category term="Android" scheme="https://gowa.club/tags/Android/"/>
    
      <category term="逆向" scheme="https://gowa.club/tags/%E9%80%86%E5%90%91/"/>
    
      <category term="Hooking" scheme="https://gowa.club/tags/Hooking/"/>
    
  </entry>
  
  <entry>
    <title>Riru来注入Zygote进程</title>
    <link href="https://gowa.club/Android/Riru%E6%9D%A5%E6%B3%A8%E5%85%A5Zygote%E8%BF%9B%E7%A8%8B.html"/>
    <id>https://gowa.club/Android/Riru%E6%9D%A5%E6%B3%A8%E5%85%A5Zygote%E8%BF%9B%E7%A8%8B.html</id>
    <published>2019-11-19T15:52:05.000Z</published>
    <updated>2019-11-19T15:52:05.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Riru 使用替换系统共享库 libmemtrack.so 来实现注入，因为 ptrace 一般来说都会被进程进行检测，所以说注入系统进程是比较轻松的一点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://gowa.club/categories/Android/"/>
    
    
      <category term="Android" scheme="https://gowa.club/tags/Android/"/>
    
      <category term="逆向" scheme="https://gowa.club/tags/%E9%80%86%E5%90%91/"/>
    
      <category term="Hooking" scheme="https://gowa.club/tags/Hooking/"/>
    
      <category term="Riru" scheme="https://gowa.club/tags/Riru/"/>
    
  </entry>
  
  <entry>
    <title>Android的权限检查过程</title>
    <link href="https://gowa.club/Android/Android%E7%9A%84%E6%9D%83%E9%99%90%E6%A3%80%E6%9F%A5%E8%BF%87%E7%A8%8B.html"/>
    <id>https://gowa.club/Android/Android%E7%9A%84%E6%9D%83%E9%99%90%E6%A3%80%E6%9F%A5%E8%BF%87%E7%A8%8B.html</id>
    <published>2019-11-17T16:13:53.000Z</published>
    <updated>2019-11-17T16:13:53.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;是从追踪 InputManagerServer 的注入输入事件开始的过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://gowa.club/categories/Android/"/>
    
    
      <category term="Android" scheme="https://gowa.club/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android的服务管理</title>
    <link href="https://gowa.club/Android/Android%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86.html"/>
    <id>https://gowa.club/Android/Android%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86.html</id>
    <published>2019-11-16T16:52:03.000Z</published>
    <updated>2019-11-16T16:52:03.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Binder&quot;&gt;&lt;a href=&quot;#Binder&quot; class=&quot;headerlink&quot; title=&quot;Binder&quot;&gt;&lt;/a&gt;Binder&lt;/h1&gt;&lt;p&gt;安卓是使用 binder 机制来进行进程间的通信的，很多系统服务（还是全部？）都会将自己通过 binder 注册到系统唯一的 servicemanager 服务中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://gowa.club/categories/Android/"/>
    
    
      <category term="Android" scheme="https://gowa.club/tags/Android/"/>
    
      <category term="ServiceManager" scheme="https://gowa.club/tags/ServiceManager/"/>
    
  </entry>
  
  <entry>
    <title>使用Clang进行交叉编译</title>
    <link href="https://gowa.club/Cpp/%E4%BD%BF%E7%94%A8Clang%E8%BF%9B%E8%A1%8C%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91.html"/>
    <id>https://gowa.club/Cpp/%E4%BD%BF%E7%94%A8Clang%E8%BF%9B%E8%A1%8C%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91.html</id>
    <published>2019-11-16T09:05:34.000Z</published>
    <updated>2019-11-16T09:05:34.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Cpp" scheme="https://gowa.club/categories/Cpp/"/>
    
    
      <category term="Cpp" scheme="https://gowa.club/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>Cocos-Creator安卓下的启动流程</title>
    <link href="https://gowa.club/Cocos-Creator/Cocos-Creator%E5%AE%89%E5%8D%93%E4%B8%8B%E7%9A%84%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B.html"/>
    <id>https://gowa.club/Cocos-Creator/Cocos-Creator%E5%AE%89%E5%8D%93%E4%B8%8B%E7%9A%84%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B.html</id>
    <published>2019-11-14T17:18:15.000Z</published>
    <updated>2019-11-29T01:35:15.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;事实上， cocos-2dx 和 cocos creator 启动过程大同小异，不过使用的绑定不一致罢了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Cocos Creator" scheme="https://gowa.club/categories/Cocos-Creator/"/>
    
    
      <category term="Cocos Creator" scheme="https://gowa.club/tags/Cocos-Creator/"/>
    
  </entry>
  
  <entry>
    <title>Android中模拟输入的实现</title>
    <link href="https://gowa.club/Android/Android%E4%B8%AD%E6%A8%A1%E6%8B%9F%E8%BE%93%E5%85%A5%E7%9A%84%E5%AE%9E%E7%8E%B0.html"/>
    <id>https://gowa.club/Android/Android%E4%B8%AD%E6%A8%A1%E6%8B%9F%E8%BE%93%E5%85%A5%E7%9A%84%E5%AE%9E%E7%8E%B0.html</id>
    <published>2019-11-13T14:29:54.000Z</published>
    <updated>2019-11-13T14:29:54.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我们在用 adb 进行调试的时候，可以使用类似 &lt;code&gt;adb shell input ...&lt;/code&gt; 的形式来进行模拟输入，输入的不止是文字，还可以是模拟按键等内容，我们来看一下其是如何实现的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://gowa.club/categories/Android/"/>
    
    
      <category term="Android" scheme="https://gowa.club/tags/Android/"/>
    
      <category term="逆向" scheme="https://gowa.club/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Lua中的协程</title>
    <link href="https://gowa.club/Lua/Lua%E4%B8%AD%E7%9A%84%E5%8D%8F%E7%A8%8B.html"/>
    <id>https://gowa.club/Lua/Lua%E4%B8%AD%E7%9A%84%E5%8D%8F%E7%A8%8B.html</id>
    <published>2019-11-12T14:02:43.000Z</published>
    <updated>2019-11-12T14:02:43.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Lua 中没有真正的线程，只有协程，Lua 中的线程概念也是为了协程而产生的。一个协程在 Lua 中代表了一段独立的执行线程。 然而，与多线程系统中的线程的区别在于， 协程仅在显式调用一个让出（yield）函数时才挂起当前的执行。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Lua" scheme="https://gowa.club/categories/Lua/"/>
    
    
      <category term="Lua" scheme="https://gowa.club/tags/Lua/"/>
    
      <category term="PIL" scheme="https://gowa.club/tags/PIL/"/>
    
  </entry>
  
  <entry>
    <title>Auto.js截图后在相册无法立即显示</title>
    <link href="https://gowa.club/Android/Auto.js%E6%88%AA%E5%9B%BE%E5%90%8E%E5%9C%A8%E7%9B%B8%E5%86%8C%E6%97%A0%E6%B3%95%E7%AB%8B%E5%8D%B3%E6%98%BE%E7%A4%BA.html"/>
    <id>https://gowa.club/Android/Auto.js%E6%88%AA%E5%9B%BE%E5%90%8E%E5%9C%A8%E7%9B%B8%E5%86%8C%E6%97%A0%E6%B3%95%E7%AB%8B%E5%8D%B3%E6%98%BE%E7%A4%BA.html</id>
    <published>2019-11-11T15:47:34.000Z</published>
    <updated>2019-11-11T15:47:34.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;事实上，在截图后，无法立即显示， Auto.js 提供了一个 media 方法来进行扫描的，不过，我想要用安卓自身的代码来实现，所以就看了一下 Rniho 如何调用 Java 类的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://gowa.club/categories/Android/"/>
    
    
      <category term="Auto.js" scheme="https://gowa.club/tags/Auto-js/"/>
    
  </entry>
  
</feed>
